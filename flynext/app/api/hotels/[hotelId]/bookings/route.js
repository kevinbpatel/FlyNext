// The below code is generated by ChatGPT o3-mini-high

// /app/api/hotels/[hotelId]/bookings/route.js 
import { NextResponse } from "next/server";
import prisma from "@/utils/db";
import { authenticate } from "@/utils/auth";

export async function GET(req, { params }) {
  try {
    // Authentication
    const userId = await authenticate(req);
    if (!userId) {
      return NextResponse.json({ message: "Unauthorized" }, { status: 401 });
    }
    
    const { hotelId } = await params;
    if (!hotelId) {
      return NextResponse.json({ message: "Hotel ID is required" }, { status: 400 });
    }
    
    // Verify ownership
    const hotel = await prisma.hotel.findFirst({
      where: { id: hotelId, ownerId: userId },
    });
    
    if (!hotel) {
      return NextResponse.json({ message: "Hotel not found or access denied" }, { status: 403 });
    }
    
    // Fetch bookings with related data
    const bookings = await prisma.booking.findMany({
      where: { hotelId },
      include: {
        user: {
          select: {
            id: true,
            firstName: true,
            lastName: true,
            email: true,
            phone: true
          }
        },
        bookingRooms: {
          include: {
            room: true
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    });
    
    // Only handle non-serializable types (Decimal)
    const serializedBookings = bookings.map(booking => ({
      ...booking,
      totalPrice: parseFloat(booking.totalPrice?.toString() || '0'),
    }));
    
    return NextResponse.json({ 
      message: "Bookings fetched successfully", 
      bookings: serializedBookings 
    }, { status: 200 });
  } catch (error) {
    console.error("Error fetching bookings:", error);
    return NextResponse.json({ message: "Internal server error", error: error.message }, { status: 500 });
  }
}