// The below code is generated by ChatGPT o3-mini-high

// /app/api/hotels/[hotelId]/bookings/cancel/route.js
import { NextResponse } from "next/server";
import { authenticate } from "@/utils/auth"; // Authentication function
import prisma from "@/utils/db";
import { createUserNotification } from "@/utils/notificationUtils"; // Notification function

export async function PATCH(req, { params }) {
  /*
    USER STORY FROM PROJECT DESCRIPTION:
    "As a hotel owner, I want to cancel a hotel reservation, so that I have 
    flexibility in managing my hotel."
  */
  try {
    // Step 1: Authenticate hotel owner
    const userId = await authenticate(req);
    if (!userId) {
      return NextResponse.json({ message: "Unauthorized" }, { status: 401 });
    }
    
    // Step 2: Extract bookingId from URL path and hotelId from params
    const { hotelId, bookingId } = await params;
    
    if (!bookingId) {
      return NextResponse.json({ message: "Booking ID is required" }, { status: 400 });
    }
    
    // Step 3: Fetch the booking and associated booking rooms
    const booking = await prisma.booking.findUnique({
      where: { id: bookingId },
      include: {
        bookingRooms: {
          include: { room: true },
        },
      },
    });
    
    if (!booking) {
      return NextResponse.json({ message: "Booking not found" }, { status: 404 });
    }
    
    // Step 4: Ensure the room belongs to the hotel owner
    const hotel = await prisma.hotel.findUnique({
      where: { id: hotelId },
    });
    
    if (!hotel || hotel.ownerId !== userId) {
      return NextResponse.json({ message: "Forbidden: You are not the owner of this hotel" }, { status: 403 });
    }
    
    // Step 5: Ensure booking status is confirmed before cancellation
    if (booking.status !== "confirmed") {
      return NextResponse.json({ message: "Only confirmed bookings can be canceled" }, { status: 400 });
    }
    
    // Step 6: Cancel the booking and update all booking rooms
    await prisma.bookingRoom.updateMany({
      where: { bookingId: booking.id },
      data: { status: "canceled" },
    });
    
    // Update the booking status
    await prisma.booking.update({
      where: { id: booking.id },
      data: { status: "canceled" },
    });
    
    // Step 7: Send notification to the user
    await createUserNotification(
      booking.userId,
      `Your booking (${booking.id}) has been canceled by the hotel owner.`
    );
    
    return NextResponse.json({ message: "Booking canceled successfully" }, { status: 200 });
  } catch (error) {
    console.error("Error canceling booking:", error);
    return NextResponse.json({ message: "Internal Server Error" }, { status: 500 });
  }
}