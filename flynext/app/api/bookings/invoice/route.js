// The below code is generated by Claude 3.7

// app/api/bookings/invoice/route.js
import { NextResponse } from "next/server";
import { authenticate } from "@/utils/auth";
import prisma from "@/utils/db";

export async function GET(request) {
  /*
    USER STORY FROM PROJECT DESCRIPTION:
    As a user, I want to receive a minimal, PDF invoice for my trip booking, 
    so that I have a record of the booking and transaction.
  */

  try {
    // 1. Authenticate user
    const userId = await authenticate(request);
    if (!userId) {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      );
    }

    // 2. Extract booking ID from URL parameters
    const { searchParams } = new URL(request.url);
    const bookingId = searchParams.get("bookingId");
    
    if (!bookingId) {
      return NextResponse.json(
        { error: "Booking ID is required" },
        { status: 400 }
      );
    }
    
    // 3. Retrieve booking with all related data
    const booking = await prisma.booking.findUnique({
      where: { 
        id: bookingId,
        userId // Ensure the booking belongs to the authenticated user
      },
      include: {
        user: {
          select: {
            firstName: true,
            lastName: true,
            email: true,
            phone: true
          }
        },
        hotel: {
          select: {
            name: true,
            address: true,
            starRating: true
          }
        },
        bookingRooms: {
          include: {
            room: {
              select: {
                type: true,
                pricePerNight: true
              }
            }
          }
        },
        bookingFlights: true
      }
    });
    
    if (!booking) {
      return NextResponse.json(
        { error: "Booking not found or access denied" },
        { status: 404 }
      );
    }

    // 4. Calculate all the invoice data
    const invoiceData = prepareInvoiceData(booking);

    // 5. Generate HTML invoice
    const html = generateInvoiceHtml(invoiceData);

    // 6. Return HTML invoice
    return new NextResponse(html, {
      headers: {
        'Content-Type': 'text/html',
      },
    });
    
  } catch (error) {
    console.error("Error generating invoice:", error);
    // Return a detailed error page
    const errorHtml = `
      <html>
        <head>
          <title>Invoice Generation Error</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; }
            .error { color: red; border: 1px solid red; padding: 10px; }
            pre { background: #f4f4f4; padding: 10px; overflow: auto; }
          </style>
        </head>
        <body>
          <h1>Error Generating Invoice</h1>
          <div class="error">
            <h2>${error.message}</h2>
            <pre>${error.stack}</pre>
          </div>
          <p>Check the server logs for more details.</p>
        </body>
      </html>
    `;
    
    return new NextResponse(errorHtml, {
      headers: {
        'Content-Type': 'text/html',
      },
      status: 500
    });
  }
}

/**
 * Prepare invoice data from booking record
 */
function prepareInvoiceData(booking) {
  // Calculate booking dates and nights
  let nights = 0;
  if (booking.checkIn && booking.checkOut) {
    const checkIn = new Date(booking.checkIn);
    const checkOut = new Date(booking.checkOut);
    nights = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24));
  }
  
  // Format date helper
  const formatDate = (date) => {
    if (!date) return 'N/A';
    const d = new Date(date);
    return `${d.getFullYear()}-${String(d.getMonth() + 1).padStart(2, '0')}-${String(d.getDate()).padStart(2, '0')}`;
  };

  // Prepare room data
  const rooms = [];
  let hotelTotal = 0;
  
  if (booking.bookingRooms && booking.bookingRooms.length) {
    booking.bookingRooms.forEach(br => {
      const roomType = typeof br.room.type === 'string' 
        ? br.room.type.replace(/"/g, '') 
        : 'Standard Room';
        
      const quantity = br.quantity;
      const pricePerNight = parseFloat(br.room.pricePerNight);
      const totalPrice = pricePerNight * quantity * nights;
      
      hotelTotal += totalPrice;
      
      rooms.push({
        type: roomType,
        quantity,
        pricePerNight,
        nights,
        totalPrice
      });
    });
  }
  
  // Prepare flight data
  const flightGroups = {};
  
  if (booking.bookingFlights && booking.bookingFlights.length) {
    booking.bookingFlights.forEach(bf => {
      const ref = bf.bookingReference || 'Unknown';
      if (!flightGroups[ref]) {
        flightGroups[ref] = [];
      }
      flightGroups[ref].push({
        id: bf.id,
        flightId: bf.flightId
      });
    });
  }
  
  // Format hotel address
  let hotelAddress = '';
  if (booking.hotel?.address && typeof booking.hotel.address === 'object') {
    const addr = booking.hotel.address;
    const addressParts = [];
    if (addr.street) addressParts.push(addr.street);
    if (addr.city) addressParts.push(addr.city);
    if (addr.country) addressParts.push(addr.country);
    if (addr.postalCode) addressParts.push(addr.postalCode);
    hotelAddress = addressParts.join(', ');
  }
  
  // Calculate flight cost (total - hotel)
  const totalAmount = parseFloat(booking.totalPrice);
  const flightCost = totalAmount - hotelTotal;
  
  return {
    invoiceNumber: `INV-${booking.id.substring(0, 8).toUpperCase()}`,
    issueDate: formatDate(new Date()),
    booking: {
      id: booking.id,
      status: booking.status,
      paymentStatus: booking.paymentStatus,
      createdAt: formatDate(booking.createdAt)
    },
    customer: {
      name: `${booking.user.firstName} ${booking.user.lastName}`,
      email: booking.user.email,
      phone: booking.user.phone || 'N/A'
    },
    hotel: booking.hotel ? {
      name: booking.hotel.name,
      starRating: booking.hotel.starRating,
      address: hotelAddress,
      checkIn: formatDate(booking.checkIn),
      checkOut: formatDate(booking.checkOut),
      nights
    } : null,
    rooms,
    flights: Object.entries(flightGroups).map(([reference, flights]) => ({
      bookingReference: reference,
      flights
    })),
    costs: {
      hotelTotal,
      flightCost,
      totalAmount
    }
  };
}

/**
 * Generate HTML invoice from invoice data
 */
function generateInvoiceHtml(invoice) {
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Invoice ${invoice.invoiceNumber}</title>
      <style>
        /* Reset styles */
        * {
          box-sizing: border-box;
          margin: 0;
          padding: 0;
        }
        
        /* Base styles */
        body {
          font-family: 'Segoe UI', Arial, sans-serif;
          line-height: 1.6;
          color: #333;
          background-color: #f9f9f9;
          margin: 0;
          padding: 0;
        }
        
        /* Page container */
        .page-container {
          padding: 40px;
          max-width: 1000px;
          margin: 0 auto;
        }
        
        /* Invoice container */
        .invoice-container {
          background-color: #fff;
          border-radius: 8px;
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
          padding: 40px;
          margin-bottom: 30px;
        }
        
        /* Logo and company info */
        .branding {
          display: flex;
          justify-content: space-between;
          margin-bottom: 30px;
          border-bottom: 2px solid #f0f0f0;
          padding-bottom: 20px;
        }
        
        .company-info {
          flex: 1;
        }
        
        .company-name {
          font-size: 28px;
          font-weight: 700;
          color: #2c3e50;
          margin-bottom: 5px;
        }
        
        .company-tagline {
          color: #7f8c8d;
          font-size: 14px;
          margin-bottom: 10px;
        }
        
        /* Invoice meta */
        .invoice-meta {
          text-align: right;
          flex: 1;
        }
        
        .invoice-id {
          font-size: 22px;
          font-weight: 700;
          color: #2c3e50;
          margin-bottom: 8px;
        }
        
        .invoice-meta p {
          margin-bottom: 5px;
          color: #555;
        }
        
        /* Section styles */
        .invoice-section {
          margin-bottom: 30px;
        }
        
        .invoice-section-title {
          font-size: 18px;
          font-weight: 600;
          color: #2c3e50;
          margin-bottom: 15px;
          padding-bottom: 8px;
          border-bottom: 1px solid #ecf0f1;
        }
        
        .customer-info p, .hotel-info p {
          margin-bottom: 8px;
          color: #555;
        }
        
        .info-label {
          font-weight: 600;
          color: #34495e;
          width: 120px;
          display: inline-block;
        }
        
        /* Table styles */
        table {
          width: 100%;
          border-collapse: collapse;
          margin-bottom: 20px;
          font-size: 14px;
        }
        
        th {
          background-color: #f8f9fa;
          font-weight: 600;
          text-align: left;
          padding: 12px;
          border-bottom: 2px solid #ecf0f1;
          color: #2c3e50;
        }
        
        td {
          padding: 12px;
          border-bottom: 1px solid #ecf0f1;
          vertical-align: top;
        }
        
        .text-right {
          text-align: right;
        }
        
        .text-center {
          text-align: center;
        }
        
        .total-row td {
          font-weight: 600;
          border-top: 2px solid #ecf0f1;
          border-bottom: none;
          color: #2c3e50;
        }
        
        /* Flight info */
        .flight-group {
          background-color: #f8f9fa;
          border-radius: 6px;
          padding: 15px;
          margin-bottom: 15px;
        }
        
        .flight-reference {
          font-weight: 600;
          color: #34495e;
          margin-bottom: 8px;
        }
        
        .flight-list {
          list-style-type: none;
          margin: 10px 0 10px 20px;
        }
        
        .flight-list li {
          padding: 4px 0;
        }
        
        /* Totals */
        .invoice-summary {
          background-color: #f8f9fa;
          border-radius: 6px;
          padding: 20px;
          margin-top: 30px;
        }
        
        .invoice-total {
          text-align: right;
          font-size: 22px;
          font-weight: 700;
          color: #2c3e50;
          margin-top: 15px;
        }
        
        .summary-row {
          display: flex;
          justify-content: space-between;
          padding: 8px 0;
          border-bottom: 1px solid #ecf0f1;
        }
        
        .summary-row.grand-total {
          border-top: 2px solid #ecf0f1;
          border-bottom: none;
          padding-top: 15px;
          margin-top: 8px;
          font-weight: 700;
          color: #2c3e50;
        }
        
        /* Footer */
        .invoice-footer {
          margin-top: 40px;
          text-align: center;
          font-size: 14px;
          color: #7f8c8d;
          border-top: 1px solid #ecf0f1;
          padding-top: 20px;
        }
        
        /* Print button */
        .print-button {
          display: block;
          width: 200px;
          margin: 0 auto 30px auto;
          padding: 12px 20px;
          background-color: #3498db;
          color: white;
          border: none;
          border-radius: 4px;
          cursor: pointer;
          font-size: 16px;
          font-weight: 600;
          text-align: center;
          transition: background-color 0.2s;
        }
        
        .print-button:hover {
          background-color: #2980b9;
        }
        
        /* Print styles */
        @media print {
          body {
            background-color: #fff;
            -webkit-print-color-adjust: exact;
            print-color-adjust: exact;
          }
          
          .page-container {
            padding: 0;
            max-width: none;
          }
          
          .invoice-container {
            box-shadow: none;
            border: none;
            padding: 20mm;
            margin: 0;
            border-radius: 0;
          }
          
          .print-button {
            display: none;
          }
          
          /* Ensure proper page margins */
          @page {
            size: A4;
            margin: 15mm 15mm 15mm 15mm;
          }
          
          /* Force background colors when printing */
          th, .flight-group, .invoice-summary {
            background-color: #f8f9fa !important;
            -webkit-print-color-adjust: exact;
            print-color-adjust: exact;
          }
        }
      </style>
    </head>
    <body>
      <div class="page-container">
        <button class="print-button" onclick="window.print()">Print Invoice / Save as PDF</button>
        
        <div class="invoice-container">
          <div class="branding">
            <div class="company-info">
              <div class="company-name">FlyNext</div>
              <div class="company-tagline">Your Ultimate Travel Partner</div>
            </div>
            <div class="invoice-meta">
              <div class="invoice-id">INVOICE</div>
              <p><strong>Invoice No:</strong> ${invoice.invoiceNumber}</p>
              <p><strong>Date:</strong> ${invoice.issueDate}</p>
              <p><strong>Booking Reference:</strong> ${invoice.booking.id.substring(0, 13)}...</p>
            </div>
          </div>
          
          <div class="invoice-section">
            <h2 class="invoice-section-title">Customer Information</h2>
            <div class="customer-info">
              <p><span class="info-label">Name:</span> ${invoice.customer.name}</p>
              <p><span class="info-label">Email:</span> ${invoice.customer.email}</p>
              <p><span class="info-label">Phone:</span> ${invoice.customer.phone}</p>
            </div>
          </div>
          
          ${invoice.hotel ? `
          <div class="invoice-section">
            <h2 class="invoice-section-title">Hotel Information</h2>
            <div class="hotel-info">
              <p><span class="info-label">Hotel:</span> ${invoice.hotel.name} (${invoice.hotel.starRating}★)</p>
              <p><span class="info-label">Address:</span> ${invoice.hotel.address}</p>
              <p><span class="info-label">Check-in:</span> ${invoice.hotel.checkIn}</p>
              <p><span class="info-label">Check-out:</span> ${invoice.hotel.checkOut}</p>
              <p><span class="info-label">Nights:</span> ${invoice.hotel.nights}</p>
            </div>
          </div>
          ` : ''}
          
          ${invoice.rooms.length > 0 ? `
          <div class="invoice-section">
            <h2 class="invoice-section-title">Room Details</h2>
            <table>
              <thead>
                <tr>
                  <th style="width: 40%;">Room Type</th>
                  <th style="width: 15%;" class="text-center">Quantity</th>
                  <th style="width: 15%;" class="text-right">Price/Night</th>
                  <th style="width: 15%;" class="text-center">Nights</th>
                  <th style="width: 15%;" class="text-right">Total</th>
                </tr>
              </thead>
              <tbody>
                ${invoice.rooms.map(room => `
                  <tr>
                    <td>${room.type}</td>
                    <td class="text-center">${room.quantity}</td>
                    <td class="text-right">${room.pricePerNight.toFixed(2)}</td>
                    <td class="text-center">${room.nights}</td>
                    <td class="text-right">${room.totalPrice.toFixed(2)}</td>
                  </tr>
                `).join('')}
                <tr class="total-row">
                  <td colspan="4" class="text-right">Hotel Subtotal:</td>
                  <td class="text-right">${invoice.costs.hotelTotal.toFixed(2)}</td>
                </tr>
              </tbody>
            </table>
          </div>
          ` : ''}
          
          ${invoice.flights.length > 0 ? `
          <div class="invoice-section">
            <h2 class="invoice-section-title">Flight Information</h2>
            ${invoice.flights.map(group => `
              <div class="flight-group">
                <p class="flight-reference">Booking Reference: ${group.bookingReference}</p>
                <p>Number of Flights: ${group.flights.length}</p>
                <ul class="flight-list">
                  ${group.flights.map((flight, index) => `
                    <li>Flight ${index + 1}: ${flight.flightId}</li>
                  `).join('')}
                </ul>
              </div>
            `).join('')}
            <p><span class="info-label">Flight Cost:</span> ${invoice.costs.flightCost.toFixed(2)}</p>
          </div>
          ` : ''}
          
          <div class="invoice-section">
            <h2 class="invoice-section-title">Payment Information</h2>
            <p><span class="info-label">Status:</span> ${invoice.booking.paymentStatus}</p>
          </div>
          
          <div class="invoice-summary">
            <div class="summary-row">
              <div>Hotel Charges:</div>
              <div>${invoice.costs.hotelTotal.toFixed(2)}</div>
            </div>
            <div class="summary-row">
              <div>Flight Charges:</div>
              <div>${invoice.costs.flightCost.toFixed(2)}</div>
            </div>
            <div class="summary-row grand-total">
              <div>TOTAL AMOUNT:</div>
              <div>${invoice.costs.totalAmount.toFixed(2)}</div>
            </div>
          </div>
          
          <div class="invoice-footer">
            <p>Thank you for choosing FlyNext for your travel needs!</p>
            <p>This is an electronically generated invoice and does not require a physical signature.</p>
          </div>
        </div>
      </div>
    </body>
    </html>
  `;
}