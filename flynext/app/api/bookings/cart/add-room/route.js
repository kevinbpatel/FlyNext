// The below code is generated by Claude 3.7

// app/api/bookings/cart/add-room/route.js
import { NextResponse } from "next/server";
import { authenticate } from "@/utils/auth";
import { checkRoomAvailability } from "@/utils/bookingUtils";
import prisma from "@/utils/db";

export async function POST(request) {
  try {
    // Authenticate the user
    const userId = await authenticate(request);
    if (!userId) {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      );
    }

    // Parse request body
    const { bookingId, roomId, quantity, checkIn, checkOut } = await request.json();
    
    // Validate required fields
    if (!bookingId || !roomId || !quantity) {
      return NextResponse.json(
        { error: "Booking ID, Room ID, and quantity are required" },
        { status: 400 }
      );
    }
    
    if (!checkIn || !checkOut) {
      return NextResponse.json(
        { error: "Check-in and check-out dates are required" },
        { status: 400 }
      );
    }

    // Parse dates
    const checkInDate = new Date(checkIn);
    const checkOutDate = new Date(checkOut);
    
    // Validate dates
    if (isNaN(checkInDate.getTime()) || isNaN(checkOutDate.getTime())) {
      return NextResponse.json(
        { error: "Invalid check-in or check-out date" },
        { status: 400 }
      );
    }
    
    if (checkInDate >= checkOutDate) {
      return NextResponse.json(
        { error: "Check-out date must be after check-in date" },
        { status: 400 }
      );
    }

    // Get the booking
    const booking = await prisma.booking.findUnique({
      where: { 
        id: bookingId,
        userId
      }
    });

    if (!booking) {
      return NextResponse.json(
        { error: "Booking not found or doesn't belong to you" },
        { status: 404 }
      );
    }

    if (booking.status !== "pending") {
      return NextResponse.json(
        { error: "Can only add rooms to pending bookings" },
        { status: 400 }
      );
    }

    // Get the room with its hotel information
    const room = await prisma.room.findUnique({
      where: { id: roomId },
      include: {
        hotel: true
      }
    });

    if (!room) {
      return NextResponse.json(
        { error: "Room not found" },
        { status: 404 }
      );
    }

    // Check if this is the first room or if all rooms are from the same hotel
    if (booking.hotelId && booking.hotelId !== room.hotelId) {
      return NextResponse.json(
        { error: "All rooms in a booking must be from the same hotel" },
        { status: 400 }
      );
    }

    // Check room availability
    const isAvailable = await checkRoomAvailability(roomId, checkInDate, checkOutDate, quantity);
    
    if (!isAvailable) {
      return NextResponse.json(
        { error: "Not enough rooms available for the selected dates" },
        { status: 400 }
      );
    }

    // Add the room to the booking
    const bookingRoom = await prisma.bookingRoom.create({
      data: {
        bookingId,
        roomId,
        quantity,
        status: "pending"
      }
    });

    // Prepare booking update data
    const updateData = {};
    
    // Always set hotelId if it's not set
    if (!booking.hotelId) {
      updateData.hotelId = room.hotelId;
    }
    
    // Always update dates - if booking already has dates, they'll be overwritten
    // with the new room dates. This is more flexible for users.
    updateData.checkIn = checkInDate;
    updateData.checkOut = checkOutDate;
    
    // Update the booking
    await prisma.booking.update({
      where: { id: bookingId },
      data: updateData
    });

    // Return success response
    return NextResponse.json({
      message: "Room added to booking successfully",
      bookingRoom,
      roomDetails: {
        id: room.id,
        type: room.type,
        pricePerNight: room.pricePerNight,
        hotel: {
          id: room.hotel.id,
          name: room.hotel.name
        }
      }
    });

  } catch (error) {
    console.error("Error adding room to booking:", error);
    return NextResponse.json(
      { error: "Failed to add room to booking", details: error.message },
      { status: 500 }
    );
  }
}