// The below code is generated by Claude 3.7

// app/api/bookings/cart/remove-item/route.js
import { NextResponse } from "next/server";
import { authenticate } from "@/utils/auth";
import prisma from "@/utils/db";

export async function DELETE(request) {
  let type = 'item';
  
  try {
    // Authenticate the user
    const userId = await authenticate(request);
    if (!userId) {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      );
    }

    // Parse request body
    let data;
    try {
      data = await request.json();
    } catch (parseError) {
      return NextResponse.json(
        { error: "Invalid JSON in request body" },
        { status: 400 }
      );
    }
    
    type = data.type || 'item';
    const { bookingId, itemId } = data;
    
    if (!bookingId || !itemId) {
      return NextResponse.json(
        { error: "Booking ID and item ID are required" },
        { status: 400 }
      );
    }

    // Verify the booking exists and belongs to the user
    const booking = await prisma.booking.findUnique({
      where: { 
        id: bookingId,
        userId
      }
    });

    if (!booking) {
      return NextResponse.json(
        { error: "Booking not found or doesn't belong to you" },
        { status: 404 }
      );
    }

    if (booking.status !== "pending") {
      return NextResponse.json(
        { error: "Can only remove items from pending bookings" },
        { status: 400 }
      );
    }

    // First check if the item exists before trying to delete
    if (type === "flight") {
      // Check if this flight exists in this booking
      const bookingFlight = await prisma.bookingFlight.findFirst({
        where: {
          id: itemId,
          bookingId: bookingId
        }
      });
      
      if (!bookingFlight) {
        return NextResponse.json(
          { error: "Flight not found in this booking or already removed" },
          { status: 404 }
        );
      }
      
      // If it exists, delete it
      await prisma.bookingFlight.delete({
        where: { 
          id: itemId
        }
      });
    } else if (type === "room") {
      // Check if this room exists in this booking
      const bookingRoom = await prisma.bookingRoom.findFirst({
        where: {
          id: itemId,
          bookingId: bookingId
        }
      });
      
      if (!bookingRoom) {
        return NextResponse.json(
          { error: "Room not found in this booking or already removed" },
          { status: 404 }
        );
      }
      
      // If it exists, delete it
      await prisma.bookingRoom.delete({
        where: { 
          id: itemId
        }
      });
    } else {
      return NextResponse.json(
        { error: "Invalid item type. Must be 'flight' or 'room'" },
        { status: 400 }
      );
    }

    return NextResponse.json({
      message: `${type} removed from booking successfully`
    });
  } catch (error) {
    // Check for Prisma "not found" errors
    if (error.code === 'P2025') {
      return NextResponse.json(
        { error: `${type} not found or already removed` },
        { status: 404 }
      );
    }
    
    console.error("Error in remove item endpoint:", error.message || "Unknown error");
    
    return NextResponse.json(
      { error: "Failed to process request", details: error.message || "Unknown error" },
      { status: 500 }
    );
  }
}