// The below code is generated by Claude 3.7

// app/api/bookings/cart/add-flight/route.js
import { NextResponse } from "next/server";
import { authenticate } from "@/utils/auth";
import { validateFlight } from "@/utils/bookingUtils";
import prisma from "@/utils/db";

export async function POST(request) {
  try {
    // Authenticate the user
    const userId = await authenticate(request);
    if (!userId) {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      );
    }

    // Parse request body
    const { bookingId, flightId } = await request.json();
    
    if (!bookingId || !flightId) {
      return NextResponse.json(
        { error: "Booking ID and Flight ID are required" },
        { status: 400 }
      );
    }

    // Verify the booking exists and belongs to the user
    const booking = await prisma.booking.findUnique({
      where: { 
        id: bookingId,
        userId
      }
    });

    if (!booking) {
      return NextResponse.json(
        { error: "Booking not found or doesn't belong to you" },
        { status: 404 }
      );
    }

    if (booking.status !== "pending") {
      return NextResponse.json(
        { error: "Can only add flights to pending bookings" },
        { status: 400 }
      );
    }

    // Check if flight already exists in this booking
    const existingFlight = await prisma.bookingFlight.findFirst({
      where: {
        bookingId,
        flightId
      }
    });

    if (existingFlight) {
      return NextResponse.json(
        { error: "This flight is already in your booking" },
        { status: 400 }
      );
    }

    // Validate the flight using our simplified utility function
    let flightDetails;
    try {
      flightDetails = await validateFlight(flightId);
    } catch (validationError) {
      return NextResponse.json(
        { error: validationError.message },
        { status: 400 }
      );
    }
    
    // Flight is valid - add it to the booking
    const bookingFlight = await prisma.bookingFlight.create({
      data: {
        bookingId,
        flightId,
        status: "pending"
      }
    });

    // Log the action
    await prisma.log.create({
      data: {
        userId,
        action: `ADD_FLIGHT_TO_CART: Flight ${flightId} added to booking ${bookingId}`
      }
    });

    // Return success with flight details
    return NextResponse.json({
      message: "Flight added to booking successfully",
      bookingFlight,
      flightDetails
    });
  } catch (error) {
    console.error("Error adding flight to booking:", error);
    
    // Log the error
    try {
      await prisma.log.create({
        data: {
          userId: null,
          action: `ADD_FLIGHT_ERROR: ${error.message}`
        }
      });
    } catch (logError) {
      console.error("Failed to log error:", logError);
    }
    
    return NextResponse.json(
      { error: "Failed to add flight to booking", details: error.message },
      { status: 500 }
    );
  }
}