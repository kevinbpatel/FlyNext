// The below code is generated by Claude 3.7

// app/api/notifications/view/route.js
import { NextResponse } from "next/server";
import { authenticate } from "@/utils/auth";
import prisma from "@/utils/db";

export async function GET(request) {
  /*
    Note: To make this simple we can have a notifications menu on the front-end
    where all these notifications can be displayed.
    
    USER STORY FROM PROJECT DESCRIPTION:
    As a hotel owner, I want to receive notifications when a new booking is made
    for my hotel.
  */
  
  try {
    // 1. Authenticate user
    const userId = await authenticate(request);
    if (!userId) {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      );
    }
    
    // Optional query params for filtering or pagination
    const { searchParams } = new URL(request.url);
    const limit = parseInt(searchParams.get("limit") || "20", 10);
    const page = parseInt(searchParams.get("page") || "1", 10);
    const skip = (page - 1) * limit;
    const readFilter = searchParams.get("read"); // "true", "false", or null for all
    
    // Create the base query with the authenticated user
    const where = { userId };
    
    // Add read filter if specified
    if (readFilter === "true") {
      where.isRead = true;
    } else if (readFilter === "false") {
      where.isRead = false;
    }
    
    // 2. Retrieve notifications for the user from the DB
    const [notifications, totalCount, unreadCount] = await Promise.all([
      // Get the notifications with pagination
      prisma.notification.findMany({
        where,
        orderBy: {
          createdAt: "desc" // Most recent first
        },
        skip,
        take: limit
      }),
      // Get the total count for pagination
      prisma.notification.count({
        where
      }),
      // Get the unread count
      prisma.notification.count({
        where: {
          userId,
          isRead: false
        }
      })
    ]);
    
    // Format the response
    return NextResponse.json({
      notifications,
      pagination: {
        total: totalCount,
        page,
        limit,
        pages: Math.ceil(totalCount / limit)
      },
      unreadCount
    });
    
  } catch (error) {
    console.error("Error retrieving notifications:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}