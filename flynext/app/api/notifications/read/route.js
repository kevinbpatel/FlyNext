// The below code is generated by Claude 3.7

// app/api/notifications/read/route.js
import { NextResponse } from "next/server";
import { authenticate } from "@/utils/auth";
import prisma from "@/utils/db";

export async function POST(request) {
  /*
    Note: To make this simple we can have a notifications menu on the front-end
    where all these notifications can be displayed.

    USER STORY FROM PROJECT DESCRIPTION: 
    As a user or hotel owner, I want to see the number of unread notifications 
    as a badge and have it updated as I read them.
  */

  try {
    // 1. Authenticate user
    const userId = await authenticate(request);
    if (!userId) {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      );
    }

    // 2. Extract notification ID(s) from request body
    const body = await request.json();
    
    // Handle both single notification ID and array of IDs
    let notificationIds = [];
    if (body.notificationId) {
      // Single notification ID
      notificationIds = [body.notificationId];
    } else if (body.notificationIds && Array.isArray(body.notificationIds)) {
      // Array of notification IDs
      notificationIds = body.notificationIds;
    } else {
      return NextResponse.json(
        { error: "No notification ID(s) provided" },
        { status: 400 }
      );
    }

    // 3. Update the notification status in the DB to "read"
    // Only update notifications that belong to this user for security
    const updateResult = await prisma.notification.updateMany({
      where: {
        id: {
          in: notificationIds
        },
        userId: userId
      },
      data: {
        isRead: true
      }
    });

    // 4. Get the updated unread count to return to the frontend
    const unreadCount = await prisma.notification.count({
      where: {
        userId: userId,
        isRead: false
      }
    });

    return NextResponse.json({ 
      message: "Notification(s) marked as read",
      updated: updateResult.count,
      unreadCount: unreadCount
    });
    
  } catch (error) {
    console.error("Error marking notification as read:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}

// For marking all notifications as read
export async function PUT(request) {
  try {
    // 1. Authenticate user
    const userId = await authenticate(request);
    if (!userId) {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      );
    }

    // 2. Mark all unread notifications as read for this user
    const updateResult = await prisma.notification.updateMany({
      where: {
        userId: userId,
        isRead: false
      },
      data: {
        isRead: true
      }
    });

    return NextResponse.json({ 
      message: "All notifications marked as read",
      updated: updateResult.count,
      unreadCount: 0 // After marking all as read, unread count is 0
    });
    
  } catch (error) {
    console.error("Error marking all notifications as read:", error);
    return NextResponse.json({ error: error.message }, { status: 500 });
  }
}