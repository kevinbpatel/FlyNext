// The below code is generated by Claude 3.7

// app/api/users/refresh/route.js
import { NextResponse } from "next/server";
import prisma from "@/utils/db";
import { createToken } from "@/utils/auth";
import jwt from "jsonwebtoken";

export async function POST(request) {
  /*
    USER STORY FROM PROJECT DESCRIPTION:
    As a user, I want to sign up, log in, log out, and edit my profile. Profile 
    information includes first and last name, email, profile picture, and phone 
    number. Authentication should be handled with a proper JWT setup.
  */

  try {
    const { refreshToken } = await request.json();
    if (!refreshToken) {
      return NextResponse.json(
        { error: "Refresh token is required" },
        { status: 400 }
      );
    }

    // Verify the refreshToken exists in the database
    const storedToken = await prisma.refreshToken.findFirst({
      where: {
        token: refreshToken
      }
    });
    if (!storedToken) {
      return NextResponse.json(
        { error: "Invalid refresh token" },
        { status: 401 }
      );
    }

    
    // Check if the token is expired
    if (new Date(storedToken.expiresAt) < new Date()) {
      // Remove expired token
      await prisma.refreshToken.delete({
        where: { id: storedToken.id }
      });
      
      return NextResponse.json(
        { error: "Refresh token expired" },
        { status: 401 }
      );
    }

    // Verify JWT signature and decode
    try {
      const decoded = jwt.verify(refreshToken, process.env.REFRESH_SECRET);
      const userId = decoded.id;

      // Verify the user exists
      const user = await prisma.user.findUnique({
        where: { id: userId }
      });

      if (!user) {
        return NextResponse.json(
          { error: "User not found" },
          { status: 401 }
        );
      }

      // Generate a new access token
      const newAccessToken = createToken(userId);

      // Return the new access token
      return NextResponse.json({ 
        accessToken: newAccessToken 
      });
    } catch (jwtError) {
      // Token signature invalid
      console.error("JWT verification error:", jwtError);
      return NextResponse.json(
        { error: "Invalid token signature" },
        { status: 401 }
      );
    }
  } catch (error) {
    console.error("Token refresh error:", error);
    return NextResponse.json(
      { error: "Failed to refresh token" },
      { status: 500 }
    );
  }
}