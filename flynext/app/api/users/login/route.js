// The below code is generated by Claude 3.7

//app/api/users/login/route.js
import { NextResponse } from "next/server";
import prisma from "@/utils/db";
import { comparePassword, createToken, createRefreshToken, EXPIRY_IN_JS} from "@/utils/auth";
import { ThemePreference } from "@prisma/client";

export async function POST(request) {
  /*
    USER STORY FROM PROJECT DESCRIPTION:
    As a user, I want to sign up, log in, log out, and edit my profile. Profile 
    information includes first and last name, email, profile picture, and phone 
    number. Authentication should be handled with a proper JWT setup.
  */

  try {
    const { email, password } = await request.json();

    if (!email || !password || typeof email !== "string" || typeof password !== "string") {
      return NextResponse.json(
        { message: "Invalid email or password" },
        { status: 400 }
      );
    }

    const user = await prisma.user.findFirst({
      where: { email },
    });

    if (!user || !comparePassword(password, user.passwordHash)) {
      return NextResponse.json(
        { message: "Invalid email or password" },
        { status: 401 },
      );
    } else {
      const accessToken = createToken(user.id);
      const refreshToken = createRefreshToken(user.id);

      // TODO: success response/message?
      // Store refresh token in database
      await prisma.refreshToken.create({
        data: {
          userId: user.id,
          token: refreshToken,
          expiresAt: EXPIRY_IN_JS // 7 days
        }
      });

      return NextResponse.json({
        accessToken,
        refreshToken,
        user: {
          id: user.id,
          firstName: user.firstName,
          lastName: user.lastName,
          email: user.email,
          themePreference: user.themePreference
        }
      });
    }

  } catch (error) {
    console.error("Login error:", error);
    return NextResponse.json({ error: "Failed to authenticate" }, { status: 500 });
  }
}
