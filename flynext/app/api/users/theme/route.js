// The below code is generated by Claude 3.7

// app/api/users/theme/route.js
import { NextResponse } from "next/server";
import prisma from "@/utils/db";
import { authenticate } from "@/utils/auth";

// GET endpoint to retrieve user's theme preference
export async function GET(request) {
  try {
    // Authenticate user
    const authResult = await authenticate(request);
    if (!authResult) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }
    
    // Handle user ID from authentication result
    const userId = typeof authResult === 'object' ? authResult.id : authResult;
    if (!userId) {
      return NextResponse.json({ error: "Invalid user authentication" }, { status: 401 });
    }
    
    // Fetch user's theme preference
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: { themePreference: true }
    });
    
    if (!user) {
      return NextResponse.json({ error: "User not found" }, { status: 404 });
    }
    
    return NextResponse.json({ themePreference: user.themePreference });
    
  } catch (error) {
    console.error("Error fetching theme preference:", error);
    return NextResponse.json({ 
      error: "Failed to fetch theme preference",
      details: error.message 
    }, { status: 500 });
  }
}

// PUT endpoint to update user's theme preference
export async function PUT(request) {
  try {
    // Authenticate user
    const authResult = await authenticate(request);
    if (!authResult) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }
    
    // Handle user ID from authentication result
    const userId = typeof authResult === 'object' ? authResult.id : authResult;
    if (!userId) {
      return NextResponse.json({ error: "Invalid user authentication" }, { status: 401 });
    }
    
    // Parse request body
    const { themePreference } = await request.json();
    
    // Validate theme preference
    if (!themePreference || !['light', 'dark'].includes(themePreference)) {
      return NextResponse.json({ 
        error: "Invalid theme preference. Must be 'light' or 'dark'." 
      }, { status: 400 });
    }
    
    // Update user's theme preference
    await prisma.user.update({
      where: { id: userId },
      data: { themePreference }
    });
    
    return NextResponse.json({ 
      message: "Theme preference updated successfully",
      themePreference 
    });
    
  } catch (error) {
    console.error("Error updating theme preference:", error);
    return NextResponse.json({ 
      error: "Failed to update theme preference",
      details: error.message 
    }, { status: 500 });
  }
}