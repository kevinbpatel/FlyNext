// The below code is generated by Claude 3.7

// app/api/users/edit/route.js
import { NextResponse } from "next/server";
import prisma from "@/utils/db";
import { authenticate } from "@/utils/auth";
import { saveProfileImage, deleteProfileImage, getDefaultProfileImage } from "@/utils/Images";
import { Buffer } from "buffer";

export async function PUT(request) {
  try {
    const authResult = await authenticate(request);
    if (!authResult) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }
    
    // Handle user ID from authentication result
    const userId = typeof authResult === 'object' ? authResult.id : authResult;
    if (!userId) {
      return NextResponse.json({ error: "Invalid user authentication" }, { status: 401 });
    }
    
    // Check if request is multipart/form-data
    const contentType = request.headers.get('content-type') || '';
    
    let updateData = {};
    let profilePictureFile = null;
    
    if (contentType.includes('multipart/form-data')) {
      // Parse form data
      const formData = await request.formData();
      
      // Extract text fields
      if (formData.has('firstName')) updateData.firstName = formData.get('firstName');
      if (formData.has('lastName')) updateData.lastName = formData.get('lastName');
      if (formData.has('email')) updateData.email = formData.get('email');
      if (formData.has('phone')) updateData.phone = formData.get('phone');
      
      // Extract profile picture file
      profilePictureFile = formData.get('profilePicture');
    } else {
      // Handle JSON request
      const jsonData = await request.json();
      
      if (jsonData.firstName) updateData.firstName = jsonData.firstName;
      if (jsonData.lastName) updateData.lastName = jsonData.lastName;
      if (jsonData.email) updateData.email = jsonData.email;
      if (jsonData.phone) updateData.phone = jsonData.phone;
    }
    
    // Validate email if provided
    if (updateData.email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(updateData.email)) {
        return NextResponse.json({ error: "Invalid email format" }, { status: 400 });
      }
    }
    
    // Validate phone if provided
    if (updateData.phone) {
      const phoneRegex = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;
      if (!phoneRegex.test(updateData.phone)) {
        return NextResponse.json({ error: "Invalid phone number format" }, { status: 400 });
      }
    }
    
    // Get current user to access the existing profile picture
    const currentUser = await prisma.user.findUnique({
      where: { id: userId },
      select: { profilePicture: true }
    });
    
    // Process profile picture if provided
    if (profilePictureFile instanceof Blob) {
      // Delete the old profile picture if it exists and is not the default
      if (currentUser?.profilePicture && !currentUser.profilePicture.includes('default-profile.png')) {
        deleteProfileImage(currentUser.profilePicture);
      }
      
      // Save the new profile picture
      const arrayBuffer = await profilePictureFile.arrayBuffer();
      const imageBuffer = Buffer.from(arrayBuffer);
      const originalFileName = profilePictureFile.name || "profile.png";
      const savedPath = saveProfileImage(imageBuffer, userId, originalFileName);
      
      if (savedPath) {
        updateData.profilePicture = savedPath;
      }
    }
    
    // Update the user in the database
    const updatedUser = await prisma.user.update({
      where: { id: userId },
      data: updateData,
      select: {
        id: true,
        firstName: true,
        lastName: true,
        email: true,
        phone: true,
        profilePicture: true
      }
    });
    
    return NextResponse.json({
      user: updatedUser,
      message: "Profile updated successfully"
    });
    
  } catch (error) {
    console.error("User profile update error:", error);
    
    if (error.code === 'P2002') {
      return NextResponse.json({ error: "Email is already in use" }, { status: 409 });
    }
    
    return NextResponse.json({ 
      error: "Failed to update profile",
      details: error.message
    }, { status: 500 });
  }
}