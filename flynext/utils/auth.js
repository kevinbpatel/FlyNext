// The below code is generated by Claude 3.7

import jwt from "jsonwebtoken";
import bcrypt from "bcrypt";
import prisma from "@/utils/db";

export const EXPIRY_IN_JS = new Date(Date.now() + (7 * 24 * 60 * 60 * 1000)); // 7 days from now

export function hashPassword(password) {
  return bcrypt.hashSync(password, parseInt(process.env.BCRYPT_ROUNDS));
}

export function comparePassword(password, hash) {
  return bcrypt.compareSync(password, hash);
}

export function createToken(userId) {
  return jwt.sign({ id: userId }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRATION });
};

export function createRefreshToken(userId) {
  return jwt.sign({ id: userId }, process.env.REFRESH_SECRET, {
    expiresIn: process.env.REFRESH_EXPIRATION });
};

// Middleware to Verify Access Token
export async function authenticate(req) {
  try {
    const authHeader = req.headers.get("Authorization");
    if (!authHeader) return false;

    const token = authHeader.split(" ")[1];
    if (!token) return false;

    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    if (!decoded || !decoded.id) return false;

    const user = await prisma.user.findUnique({ where: { id: decoded.id } });
    if (!user) return false;

    return user.id; // Return only the user ID if authentication succeeds
  } catch (error) {
    return false; // Return false if authentication fails
  }
}

export async function authenticate_refresh(req) {
  try {
    // Extract Authorization header
    const authHeader = req.headers.get("Authorization");
    if (!authHeader) return false;

    // Extract token
    const token = authHeader.split(" ")[1];
    if (!token) return false;

    // Verify token
    const decoded = jwt.verify(token, process.env.REFRESH_SECRET);
    if (!decoded || !decoded.id) return false;

    // Check if the refresh token exists in the database
    const storedToken = await prisma.refreshToken.findUnique({ where: { token } });
    if (!storedToken) return false;

    // Check if the refresh token is expired
    const now = new Date();
    if (storedToken.expiresAt < now) return false; // Token is expired

    return storedToken.userId; // Return user ID if valid
  } catch (error) {
    console.error("Token verification failed:", error.message);
    return false; // Return false if authentication fails
  }
}
