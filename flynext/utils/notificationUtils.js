// The below code is generated by Claude 3.7

// utils/notificationUtils.js
import prisma from "@/utils/db";

/**
 * Create a user notification directly using the prisma client
 * @param {string} userId - The user receiving the notification
 * @param {string} message - The notification message
 * @returns {Promise<Object|null>} - The created notification or null if failed
 */
export async function createUserNotification(userId, message) {
  if (!userId || !message) {
    return null;
  }
  
  try {
    // Add explicit timestamp to ensure accuracy
    const now = new Date();
    
    return await prisma.notification.create({
      data: {
        userId: userId,
        message: message,
        isRead: false,
        createdAt: now // Explicitly set timestamp instead of relying on default
      }
    });
  } catch (error) {
    // Don't try to log the error object directly as it might trigger JWT issues
    console.error(`Failed to create notification for user ${userId}`);
    return null;
  }
}

/**
 * Create hotel owner notification by first finding the owner ID
 * @param {string} hotelId - Hotel ID
 * @param {string} message - Notification message
 * @returns {Promise<Object|null>} - Created notification or null
 */
export async function createHotelOwnerNotification(hotelId, message) {
  if (!hotelId || !message) {
    return null;
  }
  
  try {
    // Find the hotel owner
    const hotel = await prisma.hotel.findUnique({
      where: { id: hotelId },
      select: { ownerId: true }
    });
    
    if (!hotel || !hotel.ownerId) {
      return null;
    }
    
    // Send notification to the owner
    return await createUserNotification(hotel.ownerId, message);
  } catch (error) {
    console.error(`Failed to create notification for hotel ${hotelId}`);
    return null;
  }
}

/**
 * Simple function to create booking notifications for user and hotel owners
 * @param {Object} bookingData - Basic booking data
 * @param {string} bookingId - ID of the created booking
 */
export async function createBookingNotifications(bookingData, bookingId) {
  // Skip if missing required data
  if (!bookingData || !bookingId) {
    return;
  }
  
  try {
    // Create user notification with simple message
    const userId = bookingData.userId;
    if (userId) {
      await createUserNotification(
        userId,
        `Your booking #${bookingId} has been confirmed successfully.`
      );
    }
    
    // Try to notify hotel owners
    const hotelBookings = bookingData.hotelBookings || [];
    const processedHotelIds = new Set();
    
    for (const booking of hotelBookings) {
      const hotelId = booking?.hotelId;
      
      if (hotelId && !processedHotelIds.has(hotelId)) {
        processedHotelIds.add(hotelId);
        await createHotelOwnerNotification(
          hotelId,
          `New booking #${bookingId} received for your hotel.`
        );
      }
    }
  } catch (err) {
    // Use a basic console.log to avoid potential issues with console.error and objects
    console.log('Error in createBookingNotifications function');
  }
}